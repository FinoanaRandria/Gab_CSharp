<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        YII=
</value>
  </data>
</root>